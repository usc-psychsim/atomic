domain know1 {	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};
	types {
 	  	loc    : object;
		victim: object;
		agent : object;
	}; 	

	pvariables { 	
		/// Victim fluents
		vloc(victim, loc) : { state-fluent, bool, default = null };
		evacuated(victim): { state-fluent, bool, default = false };
		triaged(victim): { state-fluent, bool, default = false };		
		saved(victim): { state-fluent, bool, default = false };
		/// Victim non-fluents
		regular(victim) : { non-fluent, bool, default = true };
		station(victim) : { non-fluent, loc, default = null };

		/// Locatoin fluents
		accessible(loc) : { state-fluent, bool, default = true };
		threat(loc) : { non-fluent, bool, default = false };

		/// Player fluents
		ploc(agent, loc) : { state-fluent, bool, default = false };
		can_move(agent) : { state-fluent, bool, default = true };
		has_victim(agent, victim) :  {state-fluent, bool,  default = false };
		
		/// Role-specific actions
		Med_triages(agent, victim) : {action-fluent, bool,  default = false };
		Eng_clears(agent) :  {action-fluent, bool,  default = false };
		/// General actions
		pickup_victim(agent, victim) :  {action-fluent, bool,  default = false };
		drop_victim(agent, victim, loc) :  {action-fluent, bool,  default = false };
		move(agent, loc) :  {action-fluent, bool,  default = false };
	        noop(agent)             : { action-fluent, bool, default = false };
	};
	cpfs {	
		ploc'(?a, ?lc) =
			if (move(?a, ?lc) | ploc(?a, ?lc))
				then KronDelta(true)
			else  KronDelta(false);			

		vloc'(?v, ?lc) = 
			if (  (exists_{?p : agent} [  drop_victim(?p, ?v, ?lc) ] )  | vloc(?v, ?lc)  )
				then KronDelta(true)
			else  KronDelta(false);			

		saved'(?v) = 
			if ( evacuated(?v) ^  triaged(?v) )
				then KronDelta(true)
			else  saved(?v);

		triaged'(?v) = 
			if (Med_triages(med, ?v) ^ regular(?v) ^ can_move(med) ^   (exists_{?lc : loc} [ploc(med, ?lc) ^ accessible(?lc) ^ vloc(?v, ?lc)]))
				then KronDelta(true)
			else triaged(?v);
		
		accessible'(?lc) = 
			if ( Eng_clears(eng) ^ ploc(eng, ?lc) )
				then KronDelta(true)
			else  accessible(?lc);

		evacuated'(?v) = 
			if ( exists_{?p : agent} [  drop_victim(?p, ?v, station(?v)) ] ) 
				then KronDelta(true)
			else  evacuated(?v);

		has_victim'(?p, ?v) = 
			if ( pickup_victim(?p, ?v) | has_victim(?p, ?v) )
				then KronDelta(true)
			else  KronDelta(false);			

		can_move'(?p) = 
			if (?p == eng)
				then KronDelta(true)
			else if (Eng_clears(eng) ^ (exists_{?lc : loc} [ ploc(?p, ?lc) ^ threat(?lc) ^ ploc(eng, ?lc) ]) )   
				then KronDelta(true)
			else if (exists_{?lc : loc} [ ploc(?p, ?lc) ^ threat(?lc)] ) 
				then KronDelta(false)
			else can_move(?p);

	};

	reward = 	
		[sum_{?v : victim}
			[saved(?v)  ]
		];

	action-preconditions {
	    forall_{?p : agent, ?v : victim} [
	        pickup_victim(?p, ?v) => exists_{?lc : loc} [ploc(?p, ?lc) ^ vloc(?v, ?lc) ]    ];

	    forall_{?p : agent, ?v : victim, ?lc : loc} [
	        drop_victim(?p, ?v, ?lc) =>  ( has_victim(?p, ?v) ^ ploc(?p, ?lc) ) ];

	    forall_{?p : agent, ?v : victim} [
		Med_triages(?p, ?v) => (?p == med) ];

	    forall_{?p : agent} [
		Eng_clears(?p) => (?p == eng) ];
    };

}
non-fluents know1_inst1{
	domain = know1; 
	objects { 
		loc : {tkt_1, sga_7, sga_6};
		victim: {v1, v2};
		agent : {eng, med, tran};
	}; 
	non-fluents {
		station(v1) = tkt_1;
		station(v2) = sga_7;
		//threat(loc1) = true;
		//threat(loc2) = false;	
	};
}
instance know1_inst1 { 
	domain = know1; 
 	non-fluents = know1_inst1;
	init-state { 
		ploc(eng, tkt_1) = true;
		ploc(med, tkt_1) = true;
		ploc(tran, tkt_1) = true;
		vloc(v1, tkt_1) = true;
	};
	max-nondef-actions = 3;
	horizon = 2;
	discount = 1.0;
} 
