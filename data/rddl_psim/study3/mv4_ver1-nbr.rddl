domain know1 {	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};
	types {
 	  	loc    : object;
		victim: object;
		agent : object;
	}; 	

	pvariables { 	
		/// Victim fluents
		evacuated(victim): { state-fluent, bool, default = false };
		triaged(victim): { state-fluent, bool, default = false };		
		saved(victim): { state-fluent, bool, default = false };
		/// Victim non-fluents
		station(victim) : { non-fluent, loc, default = null };
		vloc(victim) : { non-fluent, loc, default = null };

		/// Locatoin fluents
		accessible(loc) : { state-fluent, bool, default = true };
		threat(loc) : { non-fluent, bool, default = false };
		NBR-0(loc) : { non-fluent, loc, default = null };
		NBR-1(loc) : { non-fluent, loc, default = null };
		NBR-2(loc) : { non-fluent, loc, default = null };
		NBR-3(loc) : { non-fluent, loc, default = null };
		HAS-NBR-0(loc) : { non-fluent, bool, default = false };
		HAS-NBR-1(loc) : { non-fluent, bool, default = false };
		HAS-NBR-2(loc) : { non-fluent, bool, default = false };
		HAS-NBR-3(loc) : { non-fluent, bool, default = false };

		/// Player fluents
		ploc(agent) : { state-fluent, loc, default = null };
		can_move(agent) : { state-fluent, bool, default = true };
		has_victim(agent, victim) :  {state-fluent, bool,  default = false };
		
		/// Role-specific actions
		Med_triages(agent, victim) : {action-fluent, bool,  default = false };
		Eng_clears(agent, loc) :  {action-fluent, bool,  default = false };
		/// General actions
		pickup_victim(agent, victim) :  {action-fluent, bool,  default = false };
		drop_victim(agent, victim, loc) :  {action-fluent, bool,  default = false };
		move-0(agent) :  {action-fluent, bool,  default = false };
		move-1(agent) :  {action-fluent, bool,  default = false };
		move-2(agent) :  {action-fluent, bool,  default = false };
		move-3(agent) :  {action-fluent, bool,  default = false };
	        noop(agent)             : { action-fluent, bool, default = false };
	};
	cpfs {	
	    ploc'(?p) =
	        if ( move-0(?p) ) then
			NBR-0(ploc(?p))
		else 
			if ( move-1(?p) ) then
				NBR-1(ploc(?p))
		else 
			if ( move-2(?p) ) then
				NBR-2(ploc(?p))
		else 
			if ( move-3(?p) ) then
				NBR-3(ploc(?p))
		else 
			ploc(?p);		

		saved'(?v) = 
			if ( evacuated(?v) ^  triaged(?v) )
				then KronDelta(true)
			else  saved(?v);

		triaged'(?v) = 
			if (Med_triages(med, ?v) ^ (ploc(med) == vloc(?v))  )  
				then KronDelta(true)
			else triaged(?v);
		
		accessible'(?lc) = 
			if ( Eng_clears(eng, ?lc) )
				then KronDelta(true)
			else  accessible(?lc);

		evacuated'(?v) = 
			if ( exists_{?p : agent} [  drop_victim(?p, ?v, station(?v)) ] ) 
				then KronDelta(true)
			else  evacuated(?v);

		has_victim'(?p, ?v) = 
			if ( pickup_victim(?p, ?v) | has_victim(?p, ?v) )
				then KronDelta(true)
			else  KronDelta(false);			

	};

	reward = 	
		[sum_{?v : victim}
			[saved(?v)  ]
		];

	action-preconditions {
	    forall_{?p : agent, ?v : victim} [
	        pickup_victim(?p, ?v) =>  (ploc(?p) == vloc(?v) )  ];  

	    forall_{?p : agent, ?v : victim, ?lc : loc} [
	        drop_victim(?p, ?v, ?lc) =>  ( has_victim(?p, ?v) ^ (ploc(?p) == ?lc) ) ];

	    forall_{?p : agent, ?v : victim} [
		Med_triages(?p, ?v) => (?p == med) ];

	    forall_{?p : agent, ?lc : loc} [
		Eng_clears(?p, ?lc) => (?p == eng) ];
    };

}
non-fluents know1_inst1{
	domain = know1; 
	objects { 
		loc : {tkt_1, sga_7}; //, sga_6
		victim: {v1, v2};
		agent : {eng, med}; //, tran
	}; 
	non-fluents {
		station(v1) = sga_7;
		station(v2) = tkt_1;
		vloc(v1) = tkt_1;
		vloc(v2) = sga_7;
		NBR-0(tkt_1) = sga_7;
		HAS-NBR-0(tkt_1) = true;
		NBR-0(sga_7) = tkt_1;
		HAS-NBR-0(sga_7) = true;
		//threat(loc1) = true;
		//threat(loc2) = false;	
	};
}
instance know1_inst1 { 
	domain = know1; 
 	non-fluents = know1_inst1;
	init-state { 
		ploc(eng) = tkt_1;
		ploc(med) = tkt_1;
//		ploc(tran) = tkt_1;
	};
	max-nondef-actions = 3;
	horizon = 2;
	discount = 1.0;
} 
