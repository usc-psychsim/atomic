domain mv_tr_v1 {
	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};
	
	types {
  		agent : object;
 	  	loc    : object;
		role      : { @Search_Specialist, @Hazardous_Material_Specialist, @Medical_Specialist};
	}; 	
	pvariables { 	
		pLoc(agent, loc) : { state-fluent, bool, default = false };
		move(agent, loc): { action-fluent, bool, default = false};
		nbr(loc, loc)  : { non-fluent, bool, default = false };

		// victim counters
		vcounter_saved_critical(loc): {state-fluent, int, default=0};
		vcounter_unsaved_critical(loc): {state-fluent, int, default=0};
		vcounter_saved_regular(loc): {state-fluent, int, default=0};
		vcounter_unsaved_regular(loc): {state-fluent, int, default=0};

		becomeRole(agent, role) : { action-fluent, bool, default = false} ;
		isRole(agent, role) : { state-fluent, bool, default = false} ;
						
		// Victim predicates
		triage_critical(agent): { action-fluent, bool, default = false };
		triage_regular(agent): { action-fluent, bool, default = false };
		noop(agent): { action-fluent, bool, default = false };

		pickup_critical(agent): { action-fluent, bool, default = false };
		pickup_regular(agent): { action-fluent, bool, default = false };
		dropVictim(agent): { action-fluent, bool, default = false };
		has_critical(agent): { state-fluent, bool, default = false };
		has_regular(agent): { state-fluent, bool, default = false };
	};
  
	cpfs {		
		pLoc'(?p, ?lc) = 
			if (move(?p, ?lc))
				then KronDelta(true)
			else if (triage_critical(?p))
			    	then pLoc(?p, ?lc)
			else if (triage_regular(?p))
			    	then pLoc(?p, ?lc)
			else if (pickup_critical(?p))
			    	then pLoc(?p, ?lc)
			else if (pickup_regular(?p))
			    	then pLoc(?p, ?lc)
			else if (dropVictim(?p))
			    	then pLoc(?p, ?lc)
			else if (exists_{?rl : role} becomeRole(?p, ?rl))
			    	then pLoc(?p, ?lc)
			else if (noop(?p))
			    	then pLoc(?p, ?lc)
			else  KronDelta(false);
		

		isRole'(?p, ?t) = 
			if (becomeRole(?p, ?t))
				then KronDelta(true)
			else if (triage_critical(?p))
			    	then isRole(?p, ?t) 
			else if (triage_regular(?p))
			    	then isRole(?p, ?t) 
			else if (pickup_critical(?p))
			    	then isRole(?p, ?t) 
			else if (pickup_regular(?p))
			    	then isRole(?p, ?t) 
			else if (dropVictim(?p))
			    	then isRole(?p, ?t) 
			else if (exists_{?lc : loc} move(?p, ?lc))
			    	then isRole(?p, ?t) 
			else if (noop(?p))
			    	then isRole(?p, ?t) 
			else  KronDelta(false);

		vcounter_unsaved_critical'(?lc) = 	
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_critical(?p)  ] )
				then vcounter_unsaved_critical(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p, ?lc) ^ pickup_critical(?p) ])  
				then vcounter_unsaved_critical(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p, ?lc) ^ has_critical(?p) ^ dropVictim(?p) ])  
				then vcounter_unsaved_critical(?lc) + 1
			else 
				vcounter_unsaved_critical(?lc);

			
		// If either victim type was triaged, increment
		vcounter_saved_critical'(?lc) = 
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_critical(?p)  ] )
				then vcounter_saved_critical(?lc) + 1
			else 
				vcounter_saved_critical(?lc);

		vcounter_unsaved_regular'(?lc) =
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_regular(?p)  ] )
				then vcounter_unsaved_regular(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p, ?lc) ^ pickup_regular(?p) ])  
				then vcounter_unsaved_regular(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p, ?lc) ^ has_regular(?p) ^ dropVictim(?p) ])  
				then vcounter_unsaved_regular(?lc) + 1
			else 
				vcounter_unsaved_regular(?lc);
			
		// If either victim type was triaged, increment
		vcounter_saved_regular'(?lc) = 
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_regular(?p)  ] )
				then vcounter_saved_regular(?lc) + 1
			else 
				vcounter_saved_regular(?lc);


		has_critical'(?p) = 
			if (pickup_critical(?p))
				then KronDelta(true)
			else if (dropVictim(?p))
				then KronDelta(false)
			else has_critical(?p);
			
		has_regular'(?p) = 
			if (pickup_regular(?p))
				then KronDelta(true)
			else if (dropVictim(?p))
				then KronDelta(false)
			else has_regular(?p);
	};		
	reward = 	
		[sum_{?lc : loc}
			[vcounter_saved_critical(?lc) * 50 ]
		]
		;

	state-action-constraints {
		forall_{?p : agent, ?lc : loc} move(?p, ?lc) =>  exists_{?lc2 : loc} [pLoc(?p, ?lc2) ^ nbr(?lc2, ?lc) ] ;
	};


	action-preconditions {
	    // To triage a victim, you must be a medic, and there are unsaved victims in your location
	    forall_{?p : agent}
		[ triage_critical(?p) => isRole(?p,@Medical_Specialist ) ^ exists_{?lc : loc} [pLoc(?p, ?lc) ^ (vcounter_unsaved_critical(?lc) > 0) ] ]  ;
	    forall_{?p : agent}
		[ triage_regular(?p) => isRole(?p,@Medical_Specialist ) ^ exists_{?lc : loc} [pLoc(?p, ?lc) ^ (vcounter_unsaved_regular(?lc) > 0) ] ]  ;
	    };
}


non-fluents mv_tr_v1_inst1{
	domain = mv_tr_v1; 
	objects { 
		agent : {p1, p2, p3};
		loc : {tkt_1,tkt_2};
	};
	non-fluents {
		nbr(tkt_1, tkt_2) = true;
nbr(tkt_2, tkt_1) = true;

 	};
 }
instance mv_tr_v1_inst1 {
	domain = mv_tr_v1;
 	non-fluents = mv_tr_v1_inst1;
	init-state {
		pLoc(p1,tkt_1) = true;
		pLoc(p2,tkt_1) = true;
		pLoc(p3,tkt_1) = true;
vcounter_unsaved_regular(tkt_1) = 2;
vcounter_unsaved_critical(tkt_2) = 1;

	};
	max-nondef-actions = 3;
	horizon = 2;
	discount = 1.0;
} 
