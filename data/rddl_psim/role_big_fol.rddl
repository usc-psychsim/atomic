domain mv_tr_v1 {
	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};

	types {
  		agent   : object;
 	  	loc     : object;
		role    : { @Search_Specialist, @Hazardous_Material_Specialist, @Medical_Specialist};
	};
	pvariables {

	    // neighbors (constants)
//	    NBR-0(loc)      : { non-fluent, loc, default = null };
//		NBR-1(loc)      : { non-fluent, loc, default = null };
//		NBR-2(loc)      : { non-fluent, loc, default = null };
//		NBR-3(loc)      : { non-fluent, loc, default = null };
//		HAS-NBR-0(loc)  : { non-fluent, bool, default = false };
//		HAS-NBR-1(loc)  : { non-fluent, bool, default = false };
//		HAS-NBR-2(loc)  : { non-fluent, bool, default = false };
//		HAS-NBR-3(loc)  : { non-fluent, bool, default = false };
	    NBR-0(loc) : { non-fluent, loc, default = null };
	NBR-1(loc) : { non-fluent, loc, default = null };
	NBR-2(loc) : { non-fluent, loc, default = null };
	NBR-3(loc) : { non-fluent, loc, default = null };
	NBR-4(loc) : { non-fluent, loc, default = null };
	NBR-5(loc) : { non-fluent, loc, default = null };
	NBR-6(loc) : { non-fluent, loc, default = null };
	NBR-7(loc) : { non-fluent, loc, default = null };
	NBR-8(loc) : { non-fluent, loc, default = null };
	NBR-9(loc) : { non-fluent, loc, default = null };
	NBR-10(loc) : { non-fluent, loc, default = null };
	NBR-11(loc) : { non-fluent, loc, default = null };
	NBR-12(loc) : { non-fluent, loc, default = null };
	NBR-13(loc) : { non-fluent, loc, default = null };
	HAS-NBR-0(loc) : { non-fluent, bool, default = false };
	HAS-NBR-1(loc) : { non-fluent, bool, default = false };
	HAS-NBR-2(loc) : { non-fluent, bool, default = false };
	HAS-NBR-3(loc) : { non-fluent, bool, default = false };
	HAS-NBR-4(loc) : { non-fluent, bool, default = false };
	HAS-NBR-5(loc) : { non-fluent, bool, default = false };
	HAS-NBR-6(loc) : { non-fluent, bool, default = false };
	HAS-NBR-7(loc) : { non-fluent, bool, default = false };
	HAS-NBR-8(loc) : { non-fluent, bool, default = false };
	HAS-NBR-9(loc) : { non-fluent, bool, default = false };
	HAS-NBR-10(loc) : { non-fluent, bool, default = false };
	HAS-NBR-11(loc) : { non-fluent, bool, default = false };
	HAS-NBR-12(loc) : { non-fluent, bool, default = false };
	HAS-NBR-13(loc) : { non-fluent, bool, default = false };

		// move actions
//		move-0(agent) : { action-fluent, bool, default = false};
//		move-1(agent) : { action-fluent, bool, default = false};
//		move-2(agent) : { action-fluent, bool, default = false};
//		move-3(agent) : { action-fluent, bool, default = false};
		move-0(agent) : { action-fluent, bool, default = false};
	move-1(agent) : { action-fluent, bool, default = false};
	move-2(agent) : { action-fluent, bool, default = false};
	move-3(agent) : { action-fluent, bool, default = false};
	move-4(agent) : { action-fluent, bool, default = false};
	move-5(agent) : { action-fluent, bool, default = false};
	move-6(agent) : { action-fluent, bool, default = false};
	move-7(agent) : { action-fluent, bool, default = false};
	move-8(agent) : { action-fluent, bool, default = false};
	move-9(agent) : { action-fluent, bool, default = false};
	move-10(agent) : { action-fluent, bool, default = false};
	move-11(agent) : { action-fluent, bool, default = false};
	move-12(agent) : { action-fluent, bool, default = false};
	move-13(agent) : { action-fluent, bool, default = false};

        // agent state
	    pLoc(agent)         : { state-fluent, loc, default = null };
		pRole(agent)        : { state-fluent, role, default = @Search_Specialist } ;
		has_critical(agent) : { state-fluent, bool, default = false };
		has_regular(agent)  : { state-fluent, bool, default = false };

        // victim counters
		vcounter_saved_critical(loc)    : {state-fluent, int, default=0};
		vcounter_unsaved_critical(loc)  : {state-fluent, int, default=0};
		vcounter_saved_regular(loc)     : {state-fluent, int, default=0};
		vcounter_unsaved_regular(loc)   : {state-fluent, int, default=0};

        // victim-related actions
		triage_critical(agent)  : { action-fluent, bool, default = false };
		triage_regular(agent)   : { action-fluent, bool, default = false };
		pickup_critical(agent)  : { action-fluent, bool, default = false };
		pickup_regular(agent)   : { action-fluent, bool, default = false };
		dropVictim(agent)       : { action-fluent, bool, default = false };

		becomeRole(agent, role) : { action-fluent, bool, default = false} ;
        noop(agent)             : { action-fluent, bool, default = false };
	};

	cpfs {

	    pLoc'(?p) =
//	        if ( move-0(?p) ) then
//	            NBR-0(pLoc(?p))
//	        else if ( move-1(?p) ) then
//	            NBR-1(pLoc(?p))
//	        else if ( move-2(?p) ) then
//	            NBR-2(pLoc(?p))
//	        else if ( move-3(?p) ) then
//	            NBR-3(pLoc(?p))
//	        else
//	            pLoc(?p);
	        if ( move-0(?p) ) then
		NBR-0(pLoc(?p))
else 
	if ( move-1(?p) ) then
		NBR-1(pLoc(?p))
else 
	if ( move-2(?p) ) then
		NBR-2(pLoc(?p))
else 
	if ( move-3(?p) ) then
		NBR-3(pLoc(?p))
else 
	if ( move-4(?p) ) then
		NBR-4(pLoc(?p))
else 
	if ( move-5(?p) ) then
		NBR-5(pLoc(?p))
else 
	if ( move-6(?p) ) then
		NBR-6(pLoc(?p))
else 
	if ( move-7(?p) ) then
		NBR-7(pLoc(?p))
else 
	if ( move-8(?p) ) then
		NBR-8(pLoc(?p))
else 
	if ( move-9(?p) ) then
		NBR-9(pLoc(?p))
else 
	if ( move-10(?p) ) then
		NBR-10(pLoc(?p))
else 
	if ( move-11(?p) ) then
		NBR-11(pLoc(?p))
else 
	if ( move-12(?p) ) then
		NBR-12(pLoc(?p))
else 
	if ( move-13(?p) ) then
		NBR-13(pLoc(?p))
else 
	pLoc(?p);

		pRole'(?p) =
			if (becomeRole(?p, @Search_Specialist)) then
			    @Search_Specialist
			else if (becomeRole(?p, @Hazardous_Material_Specialist)) then
			    @Hazardous_Material_Specialist
			else if (becomeRole(?p, @Medical_Specialist)) then
			    @Medical_Specialist
			else
			    pRole(?p);

		vcounter_unsaved_critical'(?lc) =
			if (  exists_{?p : agent} [ pLoc(?p) == ?lc ^ triage_critical(?p)  ] )
				then vcounter_unsaved_critical(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p) == ?lc ^ pickup_critical(?p) ])
				then vcounter_unsaved_critical(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p) == ?lc ^ has_critical(?p) ^ dropVictim(?p) ])
				then vcounter_unsaved_critical(?lc) + 1
			else
				vcounter_unsaved_critical(?lc);


		// If either victim type was triaged, increment
		vcounter_saved_critical'(?lc) =
			if (  exists_{?p : agent} [ pLoc(?p) == ?lc ^ triage_critical(?p)  ] )
				then vcounter_saved_critical(?lc) + 1
			else
				vcounter_saved_critical(?lc);

		vcounter_unsaved_regular'(?lc) =
			if (  exists_{?p : agent} [ pLoc(?p) == ?lc ^ triage_regular(?p)  ] )
				then vcounter_unsaved_regular(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p) == ?lc ^ pickup_regular(?p) ])
				then vcounter_unsaved_regular(?lc) - 1
			else if (exists_{?p : agent} [pLoc(?p) == ?lc ^ has_regular(?p) ^ dropVictim(?p) ])
				then vcounter_unsaved_regular(?lc) + 1
			else
				vcounter_unsaved_regular(?lc);

		// If either victim type was triaged, increment
		vcounter_saved_regular'(?lc) =
			if (  exists_{?p : agent} [ pLoc(?p) == ?lc ^ triage_regular(?p)  ] )
				then vcounter_saved_regular(?lc) + 1
			else
				vcounter_saved_regular(?lc);


		has_critical'(?p) =
			if (pickup_critical(?p))
				then KronDelta(true)
			else if (dropVictim(?p))
				then KronDelta(false)
			else has_critical(?p);

		has_regular'(?p) =
			if (pickup_regular(?p))
				then KronDelta(true)
			else if (dropVictim(?p))
				then KronDelta(false)
			else has_regular(?p);
	};

	reward = [sum_{?lc : loc} [vcounter_saved_critical(?lc) * 50 ] ];

	action-preconditions {

	    // to move through a portal, current loc has to have neighbor through that portal
//	    forall_{?p: agent} [ move-0(?p) => HAS-NBR-0(pLoc(?p)) ];
//	    forall_{?p: agent} [ move-1(?p) => HAS-NBR-1(pLoc(?p)) ];
//	    forall_{?p: agent} [ move-2(?p) => HAS-NBR-2(pLoc(?p)) ];
//	    forall_{?p: agent} [ move-3(?p) => HAS-NBR-3(pLoc(?p)) ];
	    forall_{?p: agent} [ move-0(?p) => HAS-NBR-0(pLoc(?p)) ];
	forall_{?p: agent} [ move-1(?p) => HAS-NBR-1(pLoc(?p)) ];
	forall_{?p: agent} [ move-2(?p) => HAS-NBR-2(pLoc(?p)) ];
	forall_{?p: agent} [ move-3(?p) => HAS-NBR-3(pLoc(?p)) ];
	forall_{?p: agent} [ move-4(?p) => HAS-NBR-4(pLoc(?p)) ];
	forall_{?p: agent} [ move-5(?p) => HAS-NBR-5(pLoc(?p)) ];
	forall_{?p: agent} [ move-6(?p) => HAS-NBR-6(pLoc(?p)) ];
	forall_{?p: agent} [ move-7(?p) => HAS-NBR-7(pLoc(?p)) ];
	forall_{?p: agent} [ move-8(?p) => HAS-NBR-8(pLoc(?p)) ];
	forall_{?p: agent} [ move-9(?p) => HAS-NBR-9(pLoc(?p)) ];
	forall_{?p: agent} [ move-10(?p) => HAS-NBR-10(pLoc(?p)) ];
	forall_{?p: agent} [ move-11(?p) => HAS-NBR-11(pLoc(?p)) ];
	forall_{?p: agent} [ move-12(?p) => HAS-NBR-12(pLoc(?p)) ];
	forall_{?p: agent} [ move-13(?p) => HAS-NBR-13(pLoc(?p)) ];

	    // To triage a victim, you must be a medic, and there are unsaved victims in your location
	    forall_{?p : agent} [
	        triage_critical(?p) => pRole(?p) == @Medical_Specialist ^ vcounter_unsaved_critical( pLoc(?p) ) > 0
        ];
	    forall_{?p : agent} [
	        triage_regular(?p) => pRole(?p) == @Medical_Specialist ^ vcounter_unsaved_regular( pLoc(?p) ) > 0
        ];
    };
}


non-fluents mv_tr_v1_inst1{
	domain = mv_tr_v1;
	objects {
		agent : {p1, p2, p3};
		loc : {srt,sce,sru,srv,scc,srq,srr,srs,srm,srn,sro,srp,scw,sri,srj,srk,srl,sra,src,sre,srg,srb,srd,srf,srh,el,sdc,br,ca,o101,o100,ds,buf,kit,llc,r103,llcn,cce,r109,r108,r107,r106,r105,r104,cf,ccw,r102,ccn,r101,crc,mkcr,acr,jc,so,mcw,oba,lib,kco,tkt,ew,rrc,wb,mb,hcr,mce,r110,scn,sga};
	};
	non-fluents {
		NBR-0(srt) = sce;
HAS-NBR-0(srt) = true;
NBR-0(sce) = srt;
HAS-NBR-0(sce) = true;
NBR-1(sce) = scn;
HAS-NBR-1(sce) = true;
NBR-2(sce) = mce;
HAS-NBR-2(sce) = true;
NBR-3(sce) = sru;
HAS-NBR-3(sce) = true;
NBR-4(sce) = srv;
HAS-NBR-4(sce) = true;
NBR-0(sru) = sce;
HAS-NBR-0(sru) = true;
NBR-0(srv) = sce;
HAS-NBR-0(srv) = true;
NBR-0(scc) = srr;
HAS-NBR-0(scc) = true;
NBR-1(scc) = srm;
HAS-NBR-1(scc) = true;
NBR-2(scc) = srs;
HAS-NBR-2(scc) = true;
NBR-3(scc) = sro;
HAS-NBR-3(scc) = true;
NBR-4(scc) = scn;
HAS-NBR-4(scc) = true;
NBR-5(scc) = srp;
HAS-NBR-5(scc) = true;
NBR-6(scc) = srn;
HAS-NBR-6(scc) = true;
NBR-7(scc) = mce;
HAS-NBR-7(scc) = true;
NBR-8(scc) = srq;
HAS-NBR-8(scc) = true;
NBR-0(srq) = scc;
HAS-NBR-0(srq) = true;
NBR-0(srr) = scc;
HAS-NBR-0(srr) = true;
NBR-0(srs) = scc;
HAS-NBR-0(srs) = true;
NBR-0(srm) = scc;
HAS-NBR-0(srm) = true;
NBR-0(srn) = scc;
HAS-NBR-0(srn) = true;
NBR-0(sro) = scc;
HAS-NBR-0(sro) = true;
NBR-0(srp) = scc;
HAS-NBR-0(srp) = true;
NBR-0(scw) = srk;
HAS-NBR-0(scw) = true;
NBR-1(scw) = srl;
HAS-NBR-1(scw) = true;
NBR-2(scw) = src;
HAS-NBR-2(scw) = true;
NBR-3(scw) = scn;
HAS-NBR-3(scw) = true;
NBR-4(scw) = srg;
HAS-NBR-4(scw) = true;
NBR-5(scw) = srj;
HAS-NBR-5(scw) = true;
NBR-6(scw) = sri;
HAS-NBR-6(scw) = true;
NBR-7(scw) = sre;
HAS-NBR-7(scw) = true;
NBR-8(scw) = mce;
HAS-NBR-8(scw) = true;
NBR-9(scw) = sra;
HAS-NBR-9(scw) = true;
NBR-0(sri) = scw;
HAS-NBR-0(sri) = true;
NBR-0(srj) = scw;
HAS-NBR-0(srj) = true;
NBR-0(srk) = scw;
HAS-NBR-0(srk) = true;
NBR-0(srl) = scw;
HAS-NBR-0(srl) = true;
NBR-0(sra) = scw;
HAS-NBR-0(sra) = true;
NBR-1(sra) = srb;
HAS-NBR-1(sra) = true;
NBR-0(src) = scw;
HAS-NBR-0(src) = true;
NBR-1(src) = srd;
HAS-NBR-1(src) = true;
NBR-0(sre) = srf;
HAS-NBR-0(sre) = true;
NBR-1(sre) = scw;
HAS-NBR-1(sre) = true;
NBR-0(srg) = scw;
HAS-NBR-0(srg) = true;
NBR-1(srg) = srh;
HAS-NBR-1(srg) = true;
NBR-0(srb) = sra;
HAS-NBR-0(srb) = true;
NBR-0(srd) = src;
HAS-NBR-0(srd) = true;
NBR-0(srf) = sre;
HAS-NBR-0(srf) = true;
NBR-0(srh) = srg;
HAS-NBR-0(srh) = true;
NBR-0(el) = mcw;
HAS-NBR-0(el) = true;
NBR-1(el) = sdc;
HAS-NBR-1(el) = true;
NBR-2(el) = llc;
HAS-NBR-2(el) = true;
NBR-3(el) = mce;
HAS-NBR-3(el) = true;
NBR-4(el) = ew;
HAS-NBR-4(el) = true;
NBR-5(el) = br;
HAS-NBR-5(el) = true;
NBR-0(sdc) = mce;
HAS-NBR-0(sdc) = true;
NBR-1(sdc) = el;
HAS-NBR-1(sdc) = true;
NBR-0(br) = ca;
HAS-NBR-0(br) = true;
NBR-1(br) = el;
HAS-NBR-1(br) = true;
NBR-0(ca) = o100;
HAS-NBR-0(ca) = true;
NBR-1(ca) = o101;
HAS-NBR-1(ca) = true;
NBR-2(ca) = mcw;
HAS-NBR-2(ca) = true;
NBR-3(ca) = ds;
HAS-NBR-3(ca) = true;
NBR-4(ca) = br;
HAS-NBR-4(ca) = true;
NBR-0(o101) = ca;
HAS-NBR-0(o101) = true;
NBR-0(o100) = ca;
HAS-NBR-0(o100) = true;
NBR-0(ds) = ca;
HAS-NBR-0(ds) = true;
NBR-0(buf) = llc;
HAS-NBR-0(buf) = true;
NBR-1(buf) = kit;
HAS-NBR-1(buf) = true;
NBR-0(kit) = buf;
HAS-NBR-0(kit) = true;
NBR-0(llc) = llcn;
HAS-NBR-0(llc) = true;
NBR-1(llc) = buf;
HAS-NBR-1(llc) = true;
NBR-2(llc) = el;
HAS-NBR-2(llc) = true;
NBR-0(r103) = cce;
HAS-NBR-0(r103) = true;
NBR-1(r103) = llcn;
HAS-NBR-1(r103) = true;
NBR-0(llcn) = llc;
HAS-NBR-0(llcn) = true;
NBR-1(llcn) = r103;
HAS-NBR-1(llcn) = true;
NBR-2(llcn) = scn;
HAS-NBR-2(llcn) = true;
NBR-0(cce) = r109;
HAS-NBR-0(cce) = true;
NBR-1(cce) = mcw;
HAS-NBR-1(cce) = true;
NBR-2(cce) = r107;
HAS-NBR-2(cce) = true;
NBR-3(cce) = rrc;
HAS-NBR-3(cce) = true;
NBR-4(cce) = r103;
HAS-NBR-4(cce) = true;
NBR-5(cce) = r105;
HAS-NBR-5(cce) = true;
NBR-6(cce) = r108;
HAS-NBR-6(cce) = true;
NBR-7(cce) = cf;
HAS-NBR-7(cce) = true;
NBR-8(cce) = crc;
HAS-NBR-8(cce) = true;
NBR-9(cce) = ccn;
HAS-NBR-9(cce) = true;
NBR-10(cce) = r104;
HAS-NBR-10(cce) = true;
NBR-11(cce) = r102;
HAS-NBR-11(cce) = true;
NBR-12(cce) = r110;
HAS-NBR-12(cce) = true;
NBR-13(cce) = r106;
HAS-NBR-13(cce) = true;
NBR-0(r109) = cce;
HAS-NBR-0(r109) = true;
NBR-0(r108) = cce;
HAS-NBR-0(r108) = true;
NBR-0(r107) = cce;
HAS-NBR-0(r107) = true;
NBR-0(r106) = cce;
HAS-NBR-0(r106) = true;
NBR-0(r105) = cce;
HAS-NBR-0(r105) = true;
NBR-0(r104) = cce;
HAS-NBR-0(r104) = true;
NBR-0(cf) = ccw;
HAS-NBR-0(cf) = true;
NBR-1(cf) = cce;
HAS-NBR-1(cf) = true;
NBR-0(ccw) = mcw;
HAS-NBR-0(ccw) = true;
NBR-1(ccw) = rrc;
HAS-NBR-1(ccw) = true;
NBR-2(ccw) = cf;
HAS-NBR-2(ccw) = true;
NBR-3(ccw) = oba;
HAS-NBR-3(ccw) = true;
NBR-4(ccw) = lib;
HAS-NBR-4(ccw) = true;
NBR-5(ccw) = crc;
HAS-NBR-5(ccw) = true;
NBR-6(ccw) = ccn;
HAS-NBR-6(ccw) = true;
NBR-7(ccw) = jc;
HAS-NBR-7(ccw) = true;
NBR-8(ccw) = kco;
HAS-NBR-8(ccw) = true;
NBR-0(r102) = cce;
HAS-NBR-0(r102) = true;
NBR-0(ccn) = ccw;
HAS-NBR-0(ccn) = true;
NBR-1(ccn) = cce;
HAS-NBR-1(ccn) = true;
NBR-2(ccn) = r101;
HAS-NBR-2(ccn) = true;
NBR-3(ccn) = hcr;
HAS-NBR-3(ccn) = true;
NBR-0(r101) = ccn;
HAS-NBR-0(r101) = true;
NBR-0(crc) = ccw;
HAS-NBR-0(crc) = true;
NBR-1(crc) = acr;
HAS-NBR-1(crc) = true;
NBR-2(crc) = hcr;
HAS-NBR-2(crc) = true;
NBR-3(crc) = mkcr;
HAS-NBR-3(crc) = true;
NBR-4(crc) = cce;
HAS-NBR-4(crc) = true;
NBR-0(mkcr) = crc;
HAS-NBR-0(mkcr) = true;
NBR-0(acr) = crc;
HAS-NBR-0(acr) = true;
NBR-0(jc) = ccw;
HAS-NBR-0(jc) = true;
NBR-1(jc) = mb;
HAS-NBR-1(jc) = true;
NBR-0(so) = mcw;
HAS-NBR-0(so) = true;
NBR-0(mcw) = ccw;
HAS-NBR-0(mcw) = true;
NBR-1(mcw) = el;
HAS-NBR-1(mcw) = true;
NBR-2(mcw) = so;
HAS-NBR-2(mcw) = true;
NBR-3(mcw) = cce;
HAS-NBR-3(mcw) = true;
NBR-4(mcw) = ca;
HAS-NBR-4(mcw) = true;
NBR-0(oba) = ccw;
HAS-NBR-0(oba) = true;
NBR-0(lib) = ccw;
HAS-NBR-0(lib) = true;
NBR-0(kco) = ccw;
HAS-NBR-0(kco) = true;
NBR-1(kco) = tkt;
HAS-NBR-1(kco) = true;
NBR-0(tkt) = kco;
HAS-NBR-0(tkt) = true;
NBR-0(ew) = sga;
HAS-NBR-0(ew) = true;
NBR-1(ew) = el;
HAS-NBR-1(ew) = true;
NBR-0(rrc) = wb;
HAS-NBR-0(rrc) = true;
NBR-1(rrc) = cce;
HAS-NBR-1(rrc) = true;
NBR-2(rrc) = ccw;
HAS-NBR-2(rrc) = true;
NBR-3(rrc) = mb;
HAS-NBR-3(rrc) = true;
NBR-0(wb) = rrc;
HAS-NBR-0(wb) = true;
NBR-0(mb) = rrc;
HAS-NBR-0(mb) = true;
NBR-1(mb) = jc;
HAS-NBR-1(mb) = true;
NBR-0(hcr) = ccn;
HAS-NBR-0(hcr) = true;
NBR-1(hcr) = crc;
HAS-NBR-1(hcr) = true;
NBR-0(mce) = el;
HAS-NBR-0(mce) = true;
NBR-1(mce) = scc;
HAS-NBR-1(mce) = true;
NBR-2(mce) = scw;
HAS-NBR-2(mce) = true;
NBR-3(mce) = sdc;
HAS-NBR-3(mce) = true;
NBR-4(mce) = sce;
HAS-NBR-4(mce) = true;
NBR-0(r110) = cce;
HAS-NBR-0(r110) = true;
NBR-0(scn) = scw;
HAS-NBR-0(scn) = true;
NBR-1(scn) = sce;
HAS-NBR-1(scn) = true;
NBR-2(scn) = llcn;
HAS-NBR-2(scn) = true;
NBR-3(scn) = scc;
HAS-NBR-3(scn) = true;
NBR-0(sga) = ew;
HAS-NBR-0(sga) = true;

 	};
 }
instance mv_tr_v1_inst1 {
	domain = mv_tr_v1;
 	non-fluents = mv_tr_v1_inst1;
	init-state {
		pLoc(p1) = el; //el_3;
		pLoc(p2) = el; //el_3;
		vcounter_unsaved_critical(r102) = 1;
vcounter_unsaved_critical(srg) = 1;
vcounter_unsaved_critical(llc) = 1;
vcounter_unsaved_critical(r107) = 1;
vcounter_unsaved_critical(srt) = 1;
vcounter_unsaved_regular(tkt) = 1;
vcounter_unsaved_regular(kco) = 2;
vcounter_unsaved_regular(scn) = 1;
vcounter_unsaved_regular(r103) = 1;
vcounter_unsaved_regular(r101) = 2;
vcounter_unsaved_regular(llcn) = 1;
vcounter_unsaved_regular(llc) = 9;
vcounter_unsaved_regular(r104) = 1;
vcounter_unsaved_regular(srv) = 1;
vcounter_unsaved_regular(r105) = 1;
vcounter_unsaved_regular(crc) = 1;
vcounter_unsaved_regular(scw) = 1;
vcounter_unsaved_regular(mkcr) = 3;
vcounter_unsaved_regular(srf) = 1;
vcounter_unsaved_regular(srr) = 2;
vcounter_unsaved_regular(sce) = 1;
vcounter_unsaved_regular(acr) = 1;
vcounter_unsaved_regular(r108) = 1;
vcounter_unsaved_regular(src) = 2;
vcounter_unsaved_regular(jc) = 1;
vcounter_unsaved_regular(ds) = 3;
vcounter_unsaved_regular(el) = 1;
vcounter_unsaved_regular(br) = 1;
vcounter_unsaved_regular(mb) = 1;
vcounter_unsaved_regular(wb) = 1;
vcounter_unsaved_regular(cce) = 1;
vcounter_unsaved_regular(r109) = 1;
vcounter_unsaved_regular(srd) = 1;
vcounter_unsaved_regular(ca) = 1;
vcounter_unsaved_regular(sra) = 2;
vcounter_unsaved_regular(o100) = 1;
vcounter_unsaved_regular(mce) = 2;

	};
	max-nondef-actions = 3;
	horizon = 2;
	discount = 1.0;
} 
