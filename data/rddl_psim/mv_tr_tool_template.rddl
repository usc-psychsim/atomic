domain mv_tr_v1 {
	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};
	
	types {
  		agent : object;
 	  	loc    : object;
		role      : { @Search_Specialist, @Hazardous_Material_Specialist, @Medical_Specialist};
	}; 	
	pvariables { 	
		pLoc(agent, loc) : { state-fluent, bool, default = false };
		move(agent, loc): { action-fluent, bool, default = false};
		nbr(loc, loc)  : { non-fluent, bool, default = false };

		// victim counters
		vcounter_saved_critical(loc): {state-fluent, int, default=0};
		vcounter_unsaved_critical(loc): {state-fluent, int, default=0};
		vcounter_saved_regular(loc): {state-fluent, int, default=0};
		vcounter_unsaved_regular(loc): {state-fluent, int, default=0};

		isRole(agent, role) : { state-fluent, bool, default = false} ;
						
		// Victim predicates
		triage_critical(agent): { action-fluent, bool, default = false };
		triage_regular(agent): { action-fluent, bool, default = false };
		noop(agent): { action-fluent, bool, default = false };
	};
  
	cpfs {		
		pLoc'(?p, ?lc) = 
			if (move(?p, ?lc))
				then KronDelta(true)
			else if (triage_critical(?p))
			    	then pLoc(?p, ?lc)
			else if (triage_regular(?p))
			    	then pLoc(?p, ?lc)
			else if (noop(?p))
			    	then pLoc(?p, ?lc)
			else  KronDelta(false);
		

		vcounter_unsaved_critical'(?lc) = 	
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_critical(?p)  ] )
				then vcounter_unsaved_critical(?lc) - 1
			else 
				vcounter_unsaved_critical(?lc);
			
		// If either victim type was triaged, increment
		vcounter_saved_critical'(?lc) = 
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_critical(?p)  ] )
				then vcounter_saved_critical(?lc) + 1
			else 
				vcounter_saved_critical(?lc);


		vcounter_unsaved_regular'(?lc) = 	
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_regular(?p)  ] )
				then vcounter_unsaved_regular(?lc) - 1
			else 
				vcounter_unsaved_regular(?lc);
			
		// If either victim type was triaged, increment
		vcounter_saved_regular'(?lc) = 
			if (  exists_{?p : agent} [ pLoc(?p, ?lc) ^ triage_regular(?p)  ] )
				then vcounter_saved_regular(?lc) + 1
			else 
				vcounter_saved_regular(?lc);
	};		
	reward = 	
		[sum_{?lc : loc}
			[vcounter_saved_critical(?lc) * 50 ]
		]
		;

	state-action-constraints {
		forall_{?p : agent, ?lc : loc} move(?p, ?lc) =>  exists_{?lc2 : loc} [pLoc(?p, ?lc2) ^ nbr(?lc2, ?lc) ] ;
	};


    action-preconditions {
	// To triage a victim, you must be a medic, and there are unsaved victims in your location 
	forall_{?p : agent} 
		[ triage_critical(?p) => isRole(?p,Medical_Specialist ) ^ exists_{?lc : loc} [pLoc(?p, ?lc) ^ (vcounter_unsaved_critical(?lc) > 0) ] ]  ;	
		[ triage_regular(?p) => isRole(?p,Medical_Specialist ) ^ exists_{?lc : loc} [pLoc(?p, ?lc) ^ (vcounter_unsaved_regular(?lc) > 0) ] ]  ;	
			
	};
}


non-fluents mv_tr_v1_inst1{
	domain = mv_tr_v1; 
	objects { 
		agent : {p1, p2, p3};
		loc : {LOCSTR};
	}; 
	non-fluents {
		NBRSTR
 	}; 
 }
instance mv_tr_v1_inst1 { 
	domain = mv_tr_v1; 
 	non-fluents = mv_tr_v1_inst1;
	init-state { 
		pLoc(p1,el_3) = true;
		pLoc(p2,el_3) = true;
		pLoc(p3,el_3) = true;
		VICSTR
	};
	max-nondef-actions = 3;
	horizon = 2;
	discount = 1.0;
} 
