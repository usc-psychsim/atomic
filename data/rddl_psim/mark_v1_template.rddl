domain mv_tr_v1 {
	
	requirements = { 
		constrained-state,
		reward-deterministic,
		multivalued,
		concurrent
	};
	
	types {
  		agent : object;
 	  	loc    : object;
		marker_type      : { @regular_mark, @none_mark, @unmarked};
	}; 	
	pvariables { 	
		correct_sem(agent) : { state-fluent, bool, default = true };		
		room_marker(loc) : {state-fluent, marker_type, default=@unmarked};
		place_marker(agent) : { state-fluent, marker_type, default = @unmarked};

	    // neighbors (constants)
	    NBR-0(loc) : { non-fluent, loc, default = null };
	NBR-1(loc) : { non-fluent, loc, default = null };
	NBR-2(loc) : { non-fluent, loc, default = null };
	NBR-3(loc) : { non-fluent, loc, default = null };
	NBR-6(loc) : { non-fluent, loc, default = null };
	HAS-NBR-0(loc) : { non-fluent, bool, default = false };
	HAS-NBR-1(loc) : { non-fluent, bool, default = false };
	HAS-NBR-2(loc) : { non-fluent, bool, default = false };
	HAS-NBR-3(loc) : { non-fluent, bool, default = false };
	HAS-NBR-6(loc) : { non-fluent, bool, default = false };

		// move actions
		move-0(agent) : { action-fluent, bool, default = false};
	move-1(agent) : { action-fluent, bool, default = false};
	move-2(agent) : { action-fluent, bool, default = false};
	move-3(agent) : { action-fluent, bool, default = false};
	move-6(agent) : { action-fluent, bool, default = false};

        // agent state
	    pLoc(agent)         : { state-fluent, loc, default = null };

		vcounter_saved_regular(loc): {state-fluent, int, default=0};
		vcounter_unsaved_regular(loc): {state-fluent, int, default=0};
		// Victim predicates
		triage_regular(agent): { action-fluent, bool, default = false };
		noop(agent): { action-fluent, bool, default = false };

	};
  
	cpfs {		
	    pLoc'(?p) =
	        if ( move-0(?p) ) then
		NBR-0(pLoc(?p))
		else 
			if ( move-1(?p) ) then
				NBR-1(pLoc(?p))
		else 
			if ( move-2(?p) ) then
				NBR-2(pLoc(?p))
		else 
			if ( move-3(?p) ) then
				NBR-3(pLoc(?p))
		else 
			if ( move-6(?p) ) then
				NBR-6(pLoc(?p))
		else 
			pLoc(?p);

		correct_sem'(?p) = correct_sem(?p);

		place_marker'(?p) = 
			if (exists_{?lc : loc} [(pLoc(?p) == ?lc)^  (vcounter_unsaved_regular(?lc) > 0) ^ correct_sem(?p) ] )
				then @regular_mark
			else if (exists_{?lc : loc} [(pLoc(?p) == ?lc)^  (vcounter_unsaved_regular(?lc) == 0) ^ correct_sem(?p) ] )
				then @none_mark
			else if (exists_{?lc : loc} [(pLoc(?p) == ?lc)^  (vcounter_unsaved_regular(?lc) > 0) ^ ~correct_sem(?p) ] )
				then @none_mark
			else if (exists_{?lc : loc} [(pLoc(?p) == ?lc)^  (vcounter_unsaved_regular(?lc) == 0) ^ ~correct_sem(?p) ] )
				then @regular_mark
			else @unmarked;
				

		vcounter_unsaved_regular'(?lc) =
			if (  exists_{?p : agent} [ (pLoc(?p) == ?lc)^ triage_regular(?p)  ] )
				then vcounter_unsaved_regular(?lc) - 1
			else 
				vcounter_unsaved_regular(?lc);

		vcounter_saved_regular'(?lc) = 
			if (  exists_{?p : agent} [ (pLoc(?p) == ?lc)^ triage_regular(?p)  ] )
				then vcounter_saved_regular(?lc) + 1
			else 
				vcounter_saved_regular(?lc);

		room_marker'(?lc) = 
			if (  exists_{?p : agent} [ (pLoc(?p) == ?lc)^ (place_marker(?p) == @regular_mark)  ] )
				then @regular_mark
			else if (  exists_{?p : agent} [ (pLoc(?p) == ?lc)^ (place_marker(?p) == @none_mark)  ] )
				then @none_mark
			else
				room_marker(?lc);

	};		
	reward = 	
		[sum_{?lc : loc}
			[vcounter_saved_regular(?lc) * 10 ]
		]
		;

	state-action-constraints {
	    // to move through a portal, current loc has to have neighbor through that portal
	    forall_{?p: agent} [ move-0(?p) => HAS-NBR-0(pLoc(?p)) ];
	forall_{?p: agent} [ move-1(?p) => HAS-NBR-1(pLoc(?p)) ];
	forall_{?p: agent} [ move-2(?p) => HAS-NBR-2(pLoc(?p)) ];
	forall_{?p: agent} [ move-3(?p) => HAS-NBR-3(pLoc(?p)) ];
	forall_{?p: agent} [ move-6(?p) => HAS-NBR-6(pLoc(?p)) ];


	    // To triage a victim, you must be a medic, and there are unsaved victims in your location
	    forall_{?p : agent}
		[ triage_regular(?p) => exists_{?lc : loc} [(pLoc(?p) == ?lc)^ (vcounter_unsaved_regular(?lc) > 0) ] ]  ;
	};

}


non-fluents mv_tr_v1_inst1{
	domain = mv_tr_v1; 
	objects { 
		agent : {p1, p2};
		loc : {sga_A, sga_B, ew_A, el_A};
	}; 
	non-fluents {
NBR-0(sga_A) = sga_B;
HAS-NBR-0(sga_A) = true;
NBR-1(sga_A) = ew_A;
HAS-NBR-1(sga_A) = true;
NBR-0(ew_A) = sga_A;
HAS-NBR-0(ew_A) = true;
NBR-1(ew_A) = el_A;
HAS-NBR-1(ew_A) = true;
NBR-0(sga_B) = sga_A;
HAS-NBR-0(sga_B) = true;
NBR-6(el_A) = ew_A;
HAS-NBR-6(el_A) = true;


 	}; 
 }
instance mv_tr_v1_inst1 { 
	domain = mv_tr_v1; 
 	non-fluents = mv_tr_v1_inst1;
	init-state { 
		pLoc(p1) = el_A;
		pLoc(p2) = sga_A;
		vcounter_unsaved_regular(sga_B) = 2;

	};
	max-nondef-actions = 2;
	horizon = 2;
	discount = 1.0;
} 
